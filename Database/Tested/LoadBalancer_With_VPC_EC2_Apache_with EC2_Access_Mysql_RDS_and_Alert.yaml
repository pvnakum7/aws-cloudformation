---
AWSTemplateFormatVersion: 2010-09-09
##### VPC with Private public zone and EC2 with public and RDS with EC2.
Description: >
  Creates a VPC with public and private subnets for a given AWS Account and Database 
    

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: ganesh
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
###Database Parameters

  DBName:
    Default: Parasdb
    Description: The Paras database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUsername:
    Default: admin
    NoEcho: 'true'
    Description: The Paras database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    Default: password
    NoEcho: 'true'
    Description: The Paras database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  DBInstanceType:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.

  ###Webserver or Ec2Instance Parameters

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small

  VpcCidrParam:
    Type: String
    Description: VPC CIDR blocks
    Default: 10.0.0.0/16 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 
  
     

  # Public Subnets
  PublicAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    Default: 10.0.1.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzBSubnetBlock:
    Type: String
    Description: Subnet CIDR for second Availability Zone
    Default: 10.0.2.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzCSubnetBlock:
    Type: String
    Description: Subnet CIDR for third Availability Zone
    Default: 10.0.3.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzDSubnetBlock:
    Type: String
    Description: Subnet CIDR for 4th Availability Zone
    Default: 10.0.4.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzESubnetBlock:
    Type: String
    Description: Subnet CIDR for 5th Availability Zone
    Default: 10.0.5.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzFSubnetBlock:
    Type: String
    Description: Subnet CIDR for 6th Availability Zone
    Default: 10.0.6.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges   

  # Private Subnets
  PrivateAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 10.0.7.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzBSubnetBlock:
    Type: String
    Description: Subnet CIDR for second Availability Zone (e.g. us-west-2b, us-east-1c)
    Default: 10.0.8.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzCSubnetBlock:
    Type: String
    Description: Subnet CIDR for third Availability Zone, (e.g. us-west-2c, us-east-1d)
    Default: 10.0.9.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzDSubnetBlock:
    Type: String
    Description: Subnet CIDR for 4th Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 10.0.10.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzESubnetBlock:
    Type: String
    Description: Subnet CIDR for 5th Availability Zone (e.g. us-west-2b, us-east-1c)
    Default: 10.0.11.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzFSubnetBlock:
    Type: String
    Description: Subnet CIDR for 6th Availability Zone, (e.g. us-west-2c, us-east-1d)
    Default: 10.0.12.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  HighlyAvailableNat:
    Type: String
    Description: Optional configuration for a highly available NAT Gateway setup. Default configuration is a single NAT Gateway in Subnet A. The highly available option will configure a NAT Gateway in each of the Subnets.
    AllowedPattern: "^(true|false)$"
    Default: "false"
    ConstraintDescription: must be true or false (case sensitive).
  ####SSH Connection
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  HighlyAvailable: !Equals [!Ref HighlyAvailableNat, "true"]
  NotHighlyAvailable: !Equals [!Ref HighlyAvailableNat, "false"]

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsHostnames : true
      EnableDnsSupport : true
      CidrBlock: !Ref VpcCidrParam
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
 
###########################################################################################################
 ## Private Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Private Subnets - Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private
        - Key: Type
          Value: private

  PrivateSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

###########################################################################################################
 ## Public Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Public Subnets - Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public
        - Key: Type
          Value: Public

  PublicSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment    

############################ Start Total 6 Subnets Private Availibility Zones ###########################################
     
  # First Availability Zone
  PrivateAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzASubnet
      RouteTableId: !Ref PrivateRouteTable

  # Second Availability Zone
  PrivateAzBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzBSubnetBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [1, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzBSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Third Availability Zone
  PrivateAzCSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzCSubnetBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [2, !GetAZs ""] }
        - Key: Type
          Value: Private
   
  PrivateAzCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzCSubnet
      RouteTableId: !Ref PrivateRouteTable

   # 4Th Availability Zone
  PrivateAzDSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzDSubnetBlock
      AvailabilityZone: !Select [3, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [3, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzDSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzDSubnet
      RouteTableId: !Ref PrivateRouteTable
  
  # 5th Availability Zone
  PrivateAzESubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzESubnetBlock
      AvailabilityZone: !Select [4, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [4, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzESubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzESubnet
      RouteTableId: !Ref PrivateRouteTable              

   # 6th Availability Zone
  PrivateAzFSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzFSubnetBlock
      AvailabilityZone: !Select [5, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [5, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzFSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzFSubnet
      RouteTableId: !Ref PrivateRouteTable


  ################## **************************************##########################################
############################ Start Total 6 Subnets Public Availibility Zones ###########################################
     
  # First Availability Zone
  PublicAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzASubnet
      RouteTableId: !Ref PublicRouteTable

  # Second Availability Zone
  PublicAzBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzBSubnetBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [1, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzBSubnet
      RouteTableId: !Ref PublicRouteTable

  # Third Availability Zone
  PublicAzCSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzCSubnetBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [2, !GetAZs ""] }
        - Key: Type
          Value: Public
   
  PublicAzCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzCSubnet
      RouteTableId: !Ref PublicRouteTable

   # 4Th Availability Zone
  PublicAzDSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzDSubnetBlock
      AvailabilityZone: !Select [3, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [3, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzDSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzDSubnet
      RouteTableId: !Ref PublicRouteTable
  
  # 5th Availability Zone
  PublicAzESubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzESubnetBlock
      AvailabilityZone: !Select [4, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [4, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzESubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzESubnet
      RouteTableId: !Ref PublicRouteTable              

   # 6th Availability Zone
  PublicAzFSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzFSubnetBlock
      AvailabilityZone: !Select [5, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [5, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzFSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzFSubnet
      RouteTableId: !Ref PublicRouteTable
      



############################ Start Total 6  Public and Private Subnets NAT Gateway ###########################################
  # #public and Private Subnets - NAT Gateways
  ## First A Availability Zones 
  AZANatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZANatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZANatGatewayEIP.AllocationId
      
      SubnetId: 
        - Ref: PublicAzASubnet
        

  # Second  B Availability Zone
  AZBNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZBNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZBNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PublicAzBSubnet
       

  # Third  C Availability Zone
  AZCNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZCNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZCNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PublicAzCSubnet
        

  # 4th D Availability Zone
  AZDNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZDNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZDNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PublicAzDSubnet
        

  # 5th  E Availability Zone
  AZENatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZENatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZENatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzESubnet
        

  # 6th  F Availability Zone
  AZFNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZFNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: 
        GetAtt: AZFNatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzFSubnet
  


  # NotHighlyAvailablePrivateAzCRoute:
  #   Type: AWS::EC2::Route
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     RouteTableId: !Ref PrivateAzCRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref AZANatGateway

  # NotHighlyAvailablePrivateAzCRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     SubnetId: !Ref PrivateAzCSubnet
  #     RouteTableId: !Ref PrivateAzCRouteTable


  # S3VPCEndpoint:
  #   Type: "AWS::EC2::VPCEndpoint"
  #   Properties:
  #     RouteTableIds:
  #       - !Ref PublicRouteTable
  #       - !Ref PrivateRouteTable
  #       # - !Ref PrivateAzARouteTable
  #       # - !Ref PrivateAzBRouteTable
  #       # - !Ref PrivateAzCRouteTable
  #     ServiceName: !Join
  #       - ""
  #       - - com.amazonaws.
  #         - !Ref "AWS::Region"
  #         - .s3
  #     VpcId: !Ref Vpc

  # DynamoDBVPCEndpoint:
  #   Type: "AWS::EC2::VPCEndpoint"
  #   Properties:
  #     RouteTableIds:
  #       - !Ref PublicRouteTable
  #       - !Ref PrivateRouteTable
  #       # - !Ref PrivateAzARouteTable
  #       # - !Ref PrivateAzBRouteTable
  #       # - !Ref PrivateAzCRouteTable
  #     ServiceName: !Join
  #       - ""
  #       - - com.amazonaws.
  #         - !Ref "AWS::Region"
  #         - .dynamodb
  #     VpcId: !Ref Vpc

  ############DB Instance 
  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBName:
        Ref: DBName
      Engine: MySQL
      EngineVersion: 5.7.22
      DBInstanceClass: 
        Ref: DBInstanceType
      MasterUsername: 
        Ref: DBUsername
      MasterUserPassword: 
        Ref: DBPassword
      AllocatedStorage: 
        Ref: DBAllocatedStorage  
         
      DBSubnetGroupName:
        Ref: DbSubnetGroup  
      # DependsOn:
      #   - DbSubnetGroup 

      VPCSecurityGroups:          # Note:this always use for Database security group (Cannot use DBSecurity Group)
      - Ref: DBSecurityGroup
      # DBSecurityGroups:         #NOte:  this group does not work for Database security use VPC security Group
      #   - Ref: DBSecurityGroup
      
  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription:  DBSubnet Group Access
        # 'Fn::Join':
        #   - ''
        #   - - 'RDS Subnet Group for '
        #     - Ref: 'AWS::StackName'
      SubnetIds:
        - Ref: PrivateAzASubnet
        - Ref: PublicAzASubnet
        - Ref: PublicAzBSubnet
        - Ref: PrivateAzBSubnet
        - Ref: PrivateAzCSubnet
        - Ref: PublicAzCSubnet
        - Ref: PublicAzDSubnet
        - Ref: PrivateAzDSubnet
        - Ref: PrivateAzESubnet
        - Ref: PublicAzESubnet
        - Ref: PublicAzFSubnet
        - Ref: PrivateAzFSubnet
        
      Tags:
        - Key: Name
          Value:
            Ref: 'AWS::StackName'
             
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance to RDS Access
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:        
        - CidrIp: 0.0.0.0/0       #Database allow only from Ec2 Then Enter here Ec2 EIP
          FromPort: 3306
          ToPort: 3306
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22  
      Tags:
      - Key: Name
        Value:
          Fn::Join:
          - ''
          - - Ref: AWS::StackName
            - "-rds"
      
  
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      # SecurityGroupIds:
      #   Ref: InstanceSecurityGroup 
      # SubnetId:
      #   Ref: PublicAzASubnet    
      ImageId : ami-068663a3c619dd892
      # ImageId:
      #   Fn::FindInMap:
      #   - AWSRegionArch2AMI
      #   - Ref: AWS::Region
      #   - Fn::FindInMap:
      #     - AWSInstanceType2Arch
      #     - Ref: InstanceType
      #     - Arch  
      
      # InstanceInitiatedShutdownBehavior: stop  
      # EbsOptimized: true
      
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
          - Ref: InstanceSecurityGroup
          SubnetId:
            Ref: PublicAzASubnet
      Tenancy: default
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -v
              - |
              apt install apache2 -y
              - |
              rm -rf /var/www/html/index.html
              - |
              apt install mysql-client-core-8.0
              - |
              echo "${DBInstance.Endpoint.Address}" >> /var/www/html/logs1.txt
              
              - |
              echo "<html><h1>${DBInstance.Endpoint.Address}</h1>  <h2>$link2   Work or not</h2> </html>" > /var/www/html/index.html
              - |
              cd /var/www/html
              - |
              chmod 755 index.html
              - |
              service apache2 restart
              - |
              service apache2 status active
              
              
              # yum install httpd
              # - |
              # echo Hello
              # - |
              # echo Hello > /var/www/html/index.html
              # - |
              # systemctl httpd restart       
      

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
      GroupDescription: Enable SSH access via port 22
      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 
            Ref: SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup          
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 
            Ref: SSHLocation
                  
      # SecurityGroupIngress:
      #   - IpProtocol: tcp       #set which Ip allow to access this URL 
      #     FromPort: '80'
      #     ToPort: '80'
      #   - IpProtocol: tcp
      #     FromPort: '443'
      #     ToPort: '443'
      #     CidrIp: 
      #       Ref: SSHLocation  
      #   - IpProtocol: tcp
      #     FromPort: '22'
      #     ToPort: '22'
      #     CidrIp: 
      #       Ref: SSHLocation
           
          
        # - IpProtocol: icmp          #Message control Ptotocol
        #   FromPort: '8'
        #   ToPort: '-1'
        #   CidrIp: 0.0.0.0/0  
############## EC2 Target Group
  EC2TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Targets:
        - Id:
            Ref: EC2Instance
          Port: 80
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: EC2TargetGroup
        - Key: Port
          Value: 80
###############LoadBalancer 
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: PublicAzASubnet
        - Ref: PublicAzBSubnet
        - Ref: PublicAzCSubnet
        - Ref: PublicAzDSubnet
        - Ref: PublicAzESubnet
        - Ref: PublicAzFSubnet
                
      SecurityGroups:
        - Ref: ELBSecurityGroup
  
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH and Port 80
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: EC2TargetGroup
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP      


###########Resource End



####################### OutputStart

Outputs:

  WebsiteURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - EC2Instance
          - PublicDnsName
    Description: Paras Website
  

  # JDBCConnectionString:
  #   Description: JDBC connection string for the database
  #   Value: !Join ['', ['jdbc:mysql://', !GetAtt [DBInstance, Endpoint.Address], ':', !GetAtt [
  #         DBInstance, Endpoint.Port], /, !Ref 'DBName']]
  DatabaseEndpoint: 
        Description: The database endpoint
        Value: !GetAtt DBInstance.Endpoint.Address
    
  DatabasePort:
        Description: The database port
        Value: !GetAtt DBInstance.Endpoint.Port

  VpcId:
    Description: VPC Id
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"

  PublicRouteTableId:
    Description: Route Table for public subnets
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-public-rtb"

  PublicAzASubnetId:
    Description: Availability Zone A public subnet Id
    Value: !Ref PublicAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-a-subnet"

  PublicAzBSubnetId:
    Description: Availability Zone B public subnet Id
    Value: !Ref PublicAzBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-b-subnet"

  PublicAzCSubnetId:
    Description: Availability Zone C public subnet Id
    Value: !Ref PublicAzCSubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-c-subnet"

  PrivateAzASubnetId:
    Description: Availability Zone A private subnet Id
    Value: !Ref PrivateAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-a-subnet"

  PrivateAzBSubnetId:
    Description: Availability Zone B private subnet Id
    Value: !Ref PrivateAzBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-b-subnet"

  PrivateAzCSubnetId:
    Description: Availability Zone C private subnet Id
    Value: !Ref PrivateAzCSubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-c-subnet"

  # PrivateAzARouteTableId:
  #   Description: Route table for private subnets in AZ A
  #   Value: !Ref PrivateAzARouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-a-rtb"

  # PrivateAzBRouteTableId:
  #   Description: Route table for private subnets in AZ B
  #   Value: !Ref PrivateAzBRouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-b-rtb"

  # PrivateAzCRouteTableId:
  #   Description: Route table for private subnets in AZ C
  #   Value: !Ref PrivateAzCRouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-c-rtb"

