---
AWSTemplateFormatVersion: 2010-09-09
##### VPC with Private public zone and EC2 with public and RDS with EC2.
Description: >
  Creates a VPC with public and private subnets for a given AWS Account and Database 
    

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: simformec2dillara
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type : String
    Default: ami-0323c3dd2da7fb37d      #north verginia us East-1
  
  VpcCidrParam:
    Type: String
    Description: VPC CIDR blocks
    Default: 172.31.0.0/16 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 
       

  # Public Subnets
  PublicAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    Default: 172.31.20.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  # Private Subnets
  PrivateAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 172.31.21.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 
  IAMRole:
    Description: EC2 attached IAM role
    Type: String
    Default: cloudwatchaccess                  #CloudWatchAgentAdminRole #CloudWatchAgentAdminPolicy
    ConstraintDescription: must be an existing IAM role which will be attached to EC2 instance.

  HighlyAvailableNat:
    Type: String
    Description: Optional configuration for a highly available NAT Gateway setup. Default configuration is a single NAT Gateway in Subnet A. The highly available option will configure a NAT Gateway in each of the Subnets.
    AllowedPattern: "^(true|false)$"
    Default: "false"
    ConstraintDescription: must be true or false (case sensitive).
  ####SSH Connection
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Conditions:
  HighlyAvailable: !Equals [!Ref HighlyAvailableNat, "true"]
  NotHighlyAvailable: !Equals [!Ref HighlyAvailableNat, "false"]
  

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrParam
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
 
###########################################################################################################
 ## Private Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Private Subnets - Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private
        - Key: Type
          Value: private

  PrivateSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

###########################################################################################################
 ## Public Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Public Subnets - Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public
        - Key: Type
          Value: Public

  PublicSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment    

############################ Start Total 6 Subnets Private Availibility Zones ###########################################
     
  # First Availability Zone
  PrivateAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzASubnet
      RouteTableId: !Ref PrivateRouteTable

 


  ################## **************************************##########################################
############################ Start Total 6 Subnets Public Availibility Zones ###########################################
     
  # First Availability Zone
  PublicAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzASubnet
      RouteTableId: !Ref PublicRouteTable

 
      



############################ Start Total 6  Public and Private Subnets NAT Gateway ###########################################
  # #public and Private Subnets - NAT Gateways
  ## First A Availability Zones 
  AZANatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZANatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZANatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzASubnet
        


  # NotHighlyAvailablePrivateAzCRoute:
  #   Type: AWS::EC2::Route
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     RouteTableId: !Ref PrivateAzCRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref AZANatGateway

  # NotHighlyAvailablePrivateAzCRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     SubnetId: !Ref PrivateAzCSubnet
  #     RouteTableId: !Ref PrivateAzCRouteTable





#####EC2 or Web Server Start
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent, you can change the configuration below.
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
             '/etc/cfn/cfn-hup.conf':
               content: !Sub |
                 [main]
                 stack=${AWS::StackId}
                 region=${AWS::Region}
                 interval=1
               mode: '000400'
               owner: root
               group: root
             '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
               content: !Sub |
                 [cfn-auto-reloader-hook]
                 triggers=post.update
                 path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                 action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets UpdateEnvironment
                 runas=root
               mode: '000400'
               owner: root
               group: root
             "/lib/systemd/system/cfn-hup.service":
                content: !Sub |
                  [Unit]
                  Description=cfn-hup daemon
                  [Service]
                  Type=simple
                  ExecStart=/opt/aws/bin/cfn-hup
                  Restart=always
                  [Install]
                  WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: !Sub |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: !Sub |
                systemctl start cfn-hup.service
    Properties:
      InstanceType:
        Ref: InstanceType
      IamInstanceProfile:
        Ref: IAMRole  
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      KeyName:
        Ref: KeyName
      ImageId : ami-0323c3dd2da7fb37d  
      
      SubnetId: 
        Ref: PublicAzASubnet       #Here Ref. subnet Group and Subnet Group Set Public or Private Subnet
      UserData:
        # This script below is to install AmazonCloudWatchAgent, restart AmazonCloudWatchAgent and tell the result to cloudformation.
        Fn::Base64: !Sub |
           #!/bin/bash
           rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
           /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region} --configsets default
           /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource EC2Instance --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT15M"  
      # UserData:
      #   Fn::Base64:                                
      #     !Sub |
      #         #!/bin/bash -ex
      #         yum install -y httpd;
      #         echo "<html>I love YAML CloudFormation!!</html>" > /var/www/html/index.html;
      #         cd /var/www/html;
      #         chmod 755 index.html;
      #         service httpd start;
      #         chkconfig httpd on;  
           
      # UserData:
      #   Fn::Base64:                      
      #     Sub: |
      #         #!/bin/bash -ex
      #         #this all command for Ubuntu OS
      #         apt install apache2 -y
      #         rm -rf /var/www/html/index.html
      #         apt install mysql-client-core-8.0
              
      #         # link=!Join ['', ['jdbc:mysql://', !GetAtt [DBInstance, Endpoint.Address], ':', !GetAtt [DBInstance, Endpoint.Port], /, !Ref 'DBName']]
      #         # lan1="jdbc:mysql://"
      #         # echo "DB_CONNECTION=${DBInstance.Endpoint.Address}" >> /var/www/html/logs1.txt
              
      #         echo "$link1" >> /var/www/html/logsDB.txt

      #         echo "$link2"=> /var/www/html/logsDB.txt
      #         Export "$link3"=> /var/www/html/logsDB.txt
      #         # echo "Hello DBInstance, jdbc:mysql://${DBInstance.Endpoint.Address"".$DBInstance.Endpoint.Address"":$DBInstance.Endpoint.Port""/$DBName"  > /var/www/html/logs1.txt

      #         # echo link2="Hello DBInstance, jdbc//:mysql://${DBInstance.Endpoint.Address"".$DBInstance.Endpoint.Address"":$DBInstance.Endpoint.Port""/$DBName"  > /var/www/html/logsDB.txt

      #         # echo "jdbc:mysql//://${DBInstance.Endpoint.Address." > /var/www/html/logsRDS.txt

      #         echo "<html><h1>${DBInstance.Endpoint.Address}</h1>  <h2>$link2   Work or not</h2> </html>" > /var/www/html/index.html
      #         cd /var/www/html
      #         chmod 755 index.html
      #         service apache2 restart
      #         service apache2 status active        

      
                           #linux :  ami-068663a3c619dd892   
        # Ref: InstanceAMI 

      # ImageId:
      #   Fn::FindInMap:
      #   - AWSRegionArch2AMI
      #   - Ref: AWS::Region
      #   - Fn::FindInMap:
      #     - AWSInstanceType2Arch
      #     - Ref: InstanceType
      #     - Arch
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
      GroupDescription: Enable SSH access via port 22
      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0       #set which Ip allow to access this URL 
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 
            Ref: SSHLocation





###########Resource End

####################### OutputStart

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"

  PublicRouteTableId:
    Description: Route Table for public subnets
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-public-rtb"

  PublicAzASubnetId:
    Description: Availability Zone A public subnet Id
    Value: !Ref PublicAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-a-subnet"

  

  PrivateAzASubnetId:
    Description: Availability Zone A private subnet Id
    Value: !Ref PrivateAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-a-subnet"

  


