---

AWSTemplateFormatVersion: 2010-09-09
##### VPC with Private public zone and EC2 with public and RDS with EC2.
#### first create role for cloudwatch access : #CloudWatchAgentAdminRole #CloudWatchAgentAdminPolicy #AmazonEC2FullAccess
##    #CloudWatchAgentAdminRole #CloudWatchAgentAdminPolicy, cloudformation

Description: >
  Creates a VPC with public and private subnets for a given AWS Account and Database 

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: simformec2dillara        #        paarscloudwatch
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type : String
    Default: ami-0323c3dd2da7fb37d


  VpcCidrParam:
    Type: String
    Description: VPC CIDR blocks
    Default: 172.31.0.0/16                # set here as per VPC block
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 
  # Public Subnets
  PublicAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    Default: 172.31.20.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  # Private Subnets
  PrivateAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 172.31.21.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.      

# Mappings:
#   RegionMap:
#     eu-west-1:
#       HVM64: ami-030dbca661d402413
#     eu-west-2:
#       HVM64: ami-0009a33f033d8b7b6
#     eu-west-3:
#       HVM64: ami-0ebb3a801d5fb8b9b
#     eu-central-1:
#       HVM64: ami-0ebe657bc328d4e82
#     us-west-2:
#       HVM64: ami-05348ee4dc634ca1c
#     us-west-1:
#       HVM64: ami-015954d5e5548d13b
#     us-east-2:
#       HVM64: ami-0cb72367e98845d43
#     us-east-1:
#       HVM64: ami-0c6b1d09930fac512
#     ap-south-1:
#       HVM64: ami-00e782930f1c3dbc7
#     ap-northeast-2:
#       HVM64: ami-08ab3f7e72215fe91
#     ap-northeast-1:
#       HVM64: ami-00d101850e971728d
#     ap-southeast-2:
#       HVM64: ami-0fb7513bcdc525c3b
#     ap-southeast-1:
#       HVM64: ami-0b5a47f8865280111
#     ca-central-1:
#       HVM64: ami-08a9b721ecc5b0a53
#     sa-east-1:
#       HVM64: ami-058141e091292ecf0

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrParam
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
 #########################################################################################################
# ###########################################################################################################
#  ## Private Subnets and Routetable
# ############################ Start Total 6  Public Route Table and Subnets Route ###########################################
#   ## Private Subnets - Route Table
#   PrivateRouteTable:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref Vpc
#       Tags:
#         - Key: Name
#           Value: !Sub ${AWS::StackName}-private
#         - Key: Type
#           Value: private

#   PrivateSubnetsRoute:
#     Type: AWS::EC2::Route
#     Properties:
#       RouteTableId: !Ref PrivateRouteTable
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGateway
#     DependsOn: VPCGatewayAttachment

# ###########################################################################################################
#  ## Public Subnets and Routetable
# ############################ Start Total 6  Public Route Table and Subnets Route ###########################################
#   ## Public Subnets - Route Table
#   PublicRouteTable:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref Vpc
#       Tags:
#         - Key: Name
#           Value: !Sub ${AWS::StackName}-Public
#         - Key: Type
#           Value: Public

#   PublicSubnetsRoute:
#     Type: AWS::EC2::Route
#     Properties:
#       RouteTableId: !Ref PublicRouteTable
#       DestinationCidrBlock: 0.0.0.0/0
#       GatewayId: !Ref InternetGateway
#     DependsOn: VPCGatewayAttachment    

# ############################ Start Total 6 Subnets Private Availibility Zones ###########################################
     
#   # First Availability Zone
#   PrivateAzASubnet:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref Vpc
#       CidrBlock: !Ref PrivateAzASubnetBlock
#       AvailabilityZone: !Select [0, !GetAZs ""]
#       MapPublicIpOnLaunch: true
#       Tags:
#         - Key: Name
#           Value: !Sub
#             - ${AWS::StackName}-Private-${Az}
#             - { Az: !Select [0, !GetAZs ""] }
#         - Key: Type
#           Value: Private

#   PrivateAzASubnetRouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       SubnetId: !Ref PrivateAzASubnet
#       RouteTableId: !Ref PrivateRouteTable


#   ################## **************************************##########################################
# ############################ Start Total 6 Subnets Public Availibility Zones ###########################################
     
#   # First Availability Zone
#   PublicAzASubnet:
#     Type: AWS::EC2::Subnet
#     Properties:
#       VpcId: !Ref Vpc
#       CidrBlock: !Ref PublicAzASubnetBlock
#       AvailabilityZone: !Select [0, !GetAZs ""]
#       MapPublicIpOnLaunch: true
#       Tags:
#         - Key: Name
#           Value: !Sub
#             - ${AWS::StackName}-Public-${Az}
#             - { Az: !Select [0, !GetAZs ""] }
#         - Key: Type
#           Value: Public

#   PublicAzASubnetRouteTableAssociation:
#     Type: AWS::EC2::SubnetRouteTableAssociation
#     Properties:
#       SubnetId: !Ref PublicAzASubnet
#       RouteTableId: !Ref PublicRouteTable


# ############################ Start Total 6  Public and Private Subnets NAT Gateway ###########################################
#   # #public and Private Subnets - NAT Gateways
#   ## First A Availability Zones 
#   AZANatGatewayEIP:
#     Type: AWS::EC2::EIP
#     Condition: HighlyAvailable
#     Properties:
#       Domain: vpc
#     DependsOn: VPCGatewayAttachment

#   AZANatGateway:
#     Type: AWS::EC2::NatGateway
#     Condition: HighlyAvailable
#     Properties:
#       AllocationId: !GetAtt AZANatGatewayEIP.AllocationId
#       SubnetId: 
#         - Ref: PublicAzASubnet


#########################################################################################################
  ASGLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      # ImageId: !FindInMap
      #   - RegionMap
      #   - !Ref 'AWS::Region'
      #   - HVM64
      ImageId : ami-0323c3dd2da7fb37d
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      LaunchConfigurationName: ASGLaunchConfiguration
      IamInstanceProfile: !Ref ASGInstanceProfile
      SecurityGroups:
        - Ref: ASGSG
      UserData:
        # This script below installs AmazonCloudWatchAgent
        # This script will only run during initial instance launch/setup.
        # This script will trigger configsets of default
        # After the execution of the default ConfigSets the cfn-signal will be returned
        Fn::Base64: !Sub |
          #!/bin/bash
          rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region} --configsets default
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          # These scripts will run during the instance launch triggered by the userData
          default:
            - 01_setupCfnHup
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
          # These scripts will run during an update of the instance metadata = stack update.
          UpdateEnvironment:
            - 02_config-amazon-cloudwatch-agent
            - 03_restart_amazon-cloudwatch-agent
        # Definition of json configuration of AmazonCloudWatchAgent
        02_config-amazon-cloudwatch-agent:
          files:
            '/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json':
              content: !Sub |
                {
                  "metrics": {
                    "append_dimensions": {
                      "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "aggregation_dimensions" : [["AutoScalingGroupName"]],
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }
        # Invoke amazon-cloudwatch-agent-ctl to restart the AmazonCloudWatchAgent.
        03_restart_amazon-cloudwatch-agent:
          commands:
            01_stop_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_service:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        # Cfn-hup setting, it is to monitor the change of metadata.
        # When there is change in the contents of json file in the metadata section, cfn-hup will call cfn-init to restart the AmazonCloudWatchAgent.
        01_setupCfnHup:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/amazon-cloudwatch-agent-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ASGLaunchConfiguration.Metadata.AWS::CloudFormation::Init.02_config-amazon-cloudwatch-agent
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource ASGLaunchConfiguration --region ${AWS::Region} --configsets UpdateEnvironment
                runas=root
              mode: '000400'
              owner: root
              group: root
            '/lib/systemd/system/cfn-hup.service':
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target
          commands:
            01enable_cfn_hup:
              command: |
                systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: |
                systemctl start cfn-hup.service
  ASGInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: AGInstanceProfile
      Roles:
        - !Ref ASGRole

  ASGRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
      RoleName: parascloudwatch

  ASGSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0       #set which Ip allow to access this URL 
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0  

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      AutoScalingGroupName: auto-scaling-group
      LaunchConfigurationName: !Ref ASGLaunchConfiguration
      MaxSize: '5'
      MinSize: '1'

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      Cooldown: '1'
      ScalingAdjustment: 1

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ASG
      Cooldown: '1'
      ScalingAdjustment: -1

  MemoryAlarmHigh:
   Type: AWS::CloudWatch::Alarm
   Properties:
     EvaluationPeriods: 1
     Statistic: Average
     Threshold: 70
     AlarmDescription: Go in Alarm is memory is higher than 70% for 60 seconds
     Period: 60
     AlarmActions:
     - Ref: ScaleUpPolicy
     Namespace: CWAgent
     Dimensions:
     - Name: AutoScalingGroupName
       Value: !Ref ASG
     ComparisonOperator: GreaterThanThreshold
     MetricName: mem_used_percent

  MemoryAlarmLow:
   Type: AWS::CloudWatch::Alarm
   Properties:
     EvaluationPeriods: 1
     Statistic: Average
     Threshold: 30
     AlarmDescription: Go in Alarm is memory is lower than 30% for 60 seconds
     Period: 60
     AlarmActions:
     - Ref: ScaleDownPolicy
     Namespace: CWAgent
     Dimensions:
     - Name: AutoScalingGroupName
       Value: !Ref ASG
     ComparisonOperator: LessThanOrEqualToThreshold
     MetricName: mem_used_percent