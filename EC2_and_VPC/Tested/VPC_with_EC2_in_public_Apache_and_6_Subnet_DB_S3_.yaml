---
AWSTemplateFormatVersion: 2010-09-09
##### VPC with Private public zone and EC2 with public and RDS with EC2.
Description: >
  Creates a VPC with public and private subnets for a given AWS Account and Database 
    

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    Default: ganesh
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small

  VpcCidrParam:
    Type: String
    Description: VPC CIDR blocks
    Default: 10.0.0.0/16 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

     

  # Public Subnets
  PublicAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone
    Default: 10.0.1.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzBSubnetBlock:
    Type: String
    Description: Subnet CIDR for second Availability Zone
    Default: 10.0.2.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzCSubnetBlock:
    Type: String
    Description: Subnet CIDR for third Availability Zone
    Default: 10.0.3.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzDSubnetBlock:
    Type: String
    Description: Subnet CIDR for 4th Availability Zone
    Default: 10.0.4.0/24 
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzESubnetBlock:
    Type: String
    Description: Subnet CIDR for 5th Availability Zone
    Default: 10.0.5.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PublicAzFSubnetBlock:
    Type: String
    Description: Subnet CIDR for 6th Availability Zone
    Default: 10.0.6.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges   

  # Private Subnets
  PrivateAzASubnetBlock:
    Type: String
    Description: Subnet CIDR for first Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 10.0.7.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzBSubnetBlock:
    Type: String
    Description: Subnet CIDR for second Availability Zone (e.g. us-west-2b, us-east-1c)
    Default: 10.0.8.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzCSubnetBlock:
    Type: String
    Description: Subnet CIDR for third Availability Zone, (e.g. us-west-2c, us-east-1d)
    Default: 10.0.9.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzDSubnetBlock:
    Type: String
    Description: Subnet CIDR for 4th Availability Zone (e.g. us-west-2a, us-east-1b)
    Default: 10.0.10.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzESubnetBlock:
    Type: String
    Description: Subnet CIDR for 5th Availability Zone (e.g. us-west-2b, us-east-1c)
    Default: 10.0.11.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 

  PrivateAzFSubnetBlock:
    Type: String
    Description: Subnet CIDR for 6th Availability Zone, (e.g. us-west-2c, us-east-1d)
    Default: 10.0.12.0/24
    AllowedPattern: "^(10|172|192)\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\/(16|17|18|19|20|21|22|23|24|25|26|27|28)$"
    ConstraintDescription: must be valid IPv4 CIDR block (/16 to /28) from the private address ranges 



  HighlyAvailableNat:
    Type: String
    Description: Optional configuration for a highly available NAT Gateway setup. Default configuration is a single NAT Gateway in Subnet A. The highly available option will configure a NAT Gateway in each of the Subnets.
    AllowedPattern: "^(true|false)$"
    Default: "false"
    ConstraintDescription: must be true or false (case sensitive).
  ####SSH Connection
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.



Conditions:
  HighlyAvailable: !Equals [!Ref HighlyAvailableNat, "true"]
  NotHighlyAvailable: !Equals [!Ref HighlyAvailableNat, "false"]

  

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrParam
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc
 
###########################################################################################################
 ## Private Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Private Subnets - Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private
        - Key: Type
          Value: private

  PrivateSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

###########################################################################################################
 ## Public Subnets and Routetable
############################ Start Total 6  Public Route Table and Subnets Route ###########################################
  ## Public Subnets - Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public
        - Key: Type
          Value: Public

  PublicSubnetsRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment    

############################ Start Total 6 Subnets Private Availibility Zones ###########################################
     
  # First Availability Zone
  PrivateAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzASubnet
      RouteTableId: !Ref PrivateRouteTable

  # Second Availability Zone
  PrivateAzBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzBSubnetBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [1, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzBSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Third Availability Zone
  PrivateAzCSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzCSubnetBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [2, !GetAZs ""] }
        - Key: Type
          Value: Private
   
  PrivateAzCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzCSubnet
      RouteTableId: !Ref PrivateRouteTable

   # 4Th Availability Zone
  PrivateAzDSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzDSubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzDSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzDSubnet
      RouteTableId: !Ref PrivateRouteTable
  
  # 5th Availability Zone
  PrivateAzESubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzESubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzESubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzESubnet
      RouteTableId: !Ref PrivateRouteTable              

   # 6th Availability Zone
  PrivateAzFSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PrivateAzFSubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Private-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Private

  PrivateAzFSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateAzFSubnet
      RouteTableId: !Ref PrivateRouteTable


  ################## **************************************##########################################
############################ Start Total 6 Subnets Public Availibility Zones ###########################################
     
  # First Availability Zone
  PublicAzASubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzASubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzASubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzASubnet
      RouteTableId: !Ref PublicRouteTable

  # Second Availability Zone
  PublicAzBSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzBSubnetBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [1, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzBSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzBSubnet
      RouteTableId: !Ref PublicRouteTable

  # Third Availability Zone
  PublicAzCSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzCSubnetBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [2, !GetAZs ""] }
        - Key: Type
          Value: Public
   
  PublicAzCSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzCSubnet
      RouteTableId: !Ref PublicRouteTable

   # 4Th Availability Zone
  PublicAzDSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzDSubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzDSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzDSubnet
      RouteTableId: !Ref PublicRouteTable
  
  # 5th Availability Zone
  PublicAzESubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzESubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzESubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzESubnet
      RouteTableId: !Ref PublicRouteTable              

   # 6th Availability Zone
  PublicAzFSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref PublicAzFSubnetBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - ${AWS::StackName}-Public-${Az}
            - { Az: !Select [0, !GetAZs ""] }
        - Key: Type
          Value: Public

  PublicAzFSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicAzFSubnet
      RouteTableId: !Ref PublicRouteTable
      



############################ Start Total 6  Public and Private Subnets NAT Gateway ###########################################
  # #public and Private Subnets - NAT Gateways
  ## First A Availability Zones 
  AZANatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZANatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZANatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzASubnet
        - Ref: PrivateAzASubnet


  # Second  B Availability Zone
  AZBNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZBNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZBNatGatewayEIP.AllocationId
      SubnetId:
      - Ref: PublicAzBSubnet
      - Ref: PrivateAzBSubnet

  # Third  C Availability Zone
  AZCNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZCNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZCNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PublicAzCSubnet
        - Ref: PrivateAzCSubnet

  # 4th D Availability Zone
  AZDNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZDNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZDNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PublicAzDSubnet
        
  AZDNatGatewayPrivate:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZDNatGatewayEIP.AllocationId
      SubnetId:
        - Ref: PrivateAzDSubnet
              
        

  # 5th  E Availability Zone
  AZENatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZENatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: !GetAtt AZENatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzESubnet
        - Ref: PrivateAzESubnet

  # 6th  F Availability Zone
  AZFNatGatewayEIP:
    Type: AWS::EC2::EIP
    Condition: HighlyAvailable
    Properties:
      Domain: vpc
    DependsOn: VPCGatewayAttachment

  AZFNatGateway:
    Type: AWS::EC2::NatGateway
    Condition: HighlyAvailable
    Properties:
      AllocationId: 
        GetAtt: AZFNatGatewayEIP.AllocationId
      SubnetId: 
        - Ref: PublicAzFSubnet
        - Ref: PrivateAzFSubnet


  # NotHighlyAvailablePrivateAzCRoute:
  #   Type: AWS::EC2::Route
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     RouteTableId: !Ref PrivateAzCRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref AZANatGateway

  # NotHighlyAvailablePrivateAzCRouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Condition: NotHighlyAvailable
  #   Properties:
  #     SubnetId: !Ref PrivateAzCSubnet
  #     RouteTableId: !Ref PrivateAzCRouteTable


  S3VPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
        # - !Ref PrivateAzARouteTable
        # - !Ref PrivateAzBRouteTable
        # - !Ref PrivateAzCRouteTable
      ServiceName: !Join
        - ""
        - - com.amazonaws.
          - !Ref "AWS::Region"
          - .s3
      VpcId: !Ref Vpc

  DynamoDBVPCEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable
        # - !Ref PrivateAzARouteTable
        # - !Ref PrivateAzBRouteTable
        # - !Ref PrivateAzCRouteTable
      ServiceName: !Join
        - ""
        - - com.amazonaws.
          - !Ref "AWS::Region"
          - .dynamodb
      VpcId: !Ref Vpc

#####EC2 or Web Server Start
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
      - Ref: InstanceSecurityGroup
      SubnetId: 
        Ref: PublicAzASubnet       #Here Ref. subnet Group and Subnet Group Set Public or Private Subnet
      # UserData:
      #   Fn::Base64:                                
      #     !Sub |
      #         #!/bin/bash -ex
      #         yum install -y httpd;
      #         echo "<html>I love YAML CloudFormation!!</html>" > /var/www/html/index.html;
      #         cd /var/www/html;
      #         chmod 755 index.html;
      #         service httpd start;
      #         chkconfig httpd on;  
           
      UserData:
        Fn::Base64:                      
          Sub: |
              #!/bin/bash -ex
              #this all command for Ubuntu OS
              apt install apache2 -y
              rm -rf /var/www/html/index.html
              apt install mysql-client-core-8.0
              
              # link=!Join ['', ['jdbc:mysql://', !GetAtt [DBInstance, Endpoint.Address], ':', !GetAtt [DBInstance, Endpoint.Port], /, !Ref 'DBName']]
              # lan1="jdbc:mysql://"
              # echo "DB_CONNECTION=${DBInstance.Endpoint.Address}" >> /var/www/html/logs1.txt
              
              echo "$link1" >> /var/www/html/logsDB.txt

              echo "$link2"=> /var/www/html/logsDB.txt
              Export "$link3"=> /var/www/html/logsDB.txt
              # echo "Hello DBInstance, jdbc:mysql://${DBInstance.Endpoint.Address"".$DBInstance.Endpoint.Address"":$DBInstance.Endpoint.Port""/$DBName"  > /var/www/html/logs1.txt

              # echo link2="Hello DBInstance, jdbc//:mysql://${DBInstance.Endpoint.Address"".$DBInstance.Endpoint.Address"":$DBInstance.Endpoint.Port""/$DBName"  > /var/www/html/logsDB.txt

              # echo "jdbc:mysql//://${DBInstance.Endpoint.Address." > /var/www/html/logsRDS.txt

              echo "<html><h1>${DBInstance.Endpoint.Address}</h1>  <h2>$link2   Work or not</h2> </html>" > /var/www/html/index.html
              cd /var/www/html
              chmod 755 index.html
              service apache2 restart
              service apache2 status active        

      KeyName:
        Ref: KeyName
      ImageId : ami-068663a3c619dd892
        # Ref: AmiId 

      # ImageId:
      #   Fn::FindInMap:
      #   - AWSRegionArch2AMI
      #   - Ref: AWS::Region
      #   - Fn::FindInMap:
      #     - AWSInstanceType2Arch
      #     - Ref: InstanceType
      #     - Arch
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
      GroupDescription: Enable SSH access via port 22
      
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0       #set which Ip allow to access this URL 
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 
            Ref: SSHLocation





###########Resource End

####################### OutputStart

Outputs:
  VpcId:
    Description: VPC Id
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-vpc-id"

  PublicRouteTableId:
    Description: Route Table for public subnets
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub "${AWS::StackName}-public-rtb"

  PublicAzASubnetId:
    Description: Availability Zone A public subnet Id
    Value: !Ref PublicAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-a-subnet"

  PublicAzBSubnetId:
    Description: Availability Zone B public subnet Id
    Value: !Ref PublicAzBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-b-subnet"

  PublicAzCSubnetId:
    Description: Availability Zone C public subnet Id
    Value: !Ref PublicAzCSubnet
    Export:
      Name: !Sub "${AWS::StackName}-public-az-c-subnet"

  PrivateAzASubnetId:
    Description: Availability Zone A private subnet Id
    Value: !Ref PrivateAzASubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-a-subnet"

  PrivateAzBSubnetId:
    Description: Availability Zone B private subnet Id
    Value: !Ref PrivateAzBSubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-b-subnet"

  PrivateAzCSubnetId:
    Description: Availability Zone C private subnet Id
    Value: !Ref PrivateAzCSubnet
    Export:
      Name: !Sub "${AWS::StackName}-private-az-c-subnet"

  # PrivateAzARouteTableId:
  #   Description: Route table for private subnets in AZ A
  #   Value: !Ref PrivateAzARouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-a-rtb"

  # PrivateAzBRouteTableId:
  #   Description: Route table for private subnets in AZ B
  #   Value: !Ref PrivateAzBRouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-b-rtb"

  # PrivateAzCRouteTableId:
  #   Description: Route table for private subnets in AZ C
  #   Value: !Ref PrivateAzCRouteTable
  #   Export:
  #     Name: !Sub "${AWS::StackName}-private-az-c-rtb"

